package easycbs.webservice.rest;

import MFS100.DeviceInfo;
import MFS100.FingerData;
import MFS100.MFS100;
import MFS100.MFS100Event;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;

import javax.swing.*;  

import java.awt.*;  
import java.awt.event.*;  
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

import org.apache.commons.codec.binary.Base64;
import org.json.JSONException;
import org.json.JSONObject;

import antlr.collections.List;



import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.JOptionPane;

/**
 *
 * @author Reetik Sharma
 */
public class compare extends javax.swing.JFrame implements MFS100Event{

    String appTitle="reetik scanner";
    String key = "";
    String usrCode="";
    int b=0,q=0,er=0;
    MFS100 mfs100 = null;
    DeviceInfo deviceInfo = new DeviceInfo();
    int quality = 60;
    int timeout = 10000;
    byte[] ISOTemplate = null;
    String encodeString;

    private MyIcon m_FingerPrintImage;

    public compare() {
        initComponents();
       
       
        mfs100 = new MFS100(this, key);
        usrCode = "";

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.x

     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {


  
       
        usertxt = new javax.swing.JTextField();
        lable1 = new javax.swing.JLabel("Enter UserCode");
        lbl = new javax.swing.JLabel();
   
     
        
    
       
        
        btnMatchISO = new javax.swing.JButton();

      

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

     
     

      
       

      
    



        btnMatchISO.setText("Validate");
        btnMatchISO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	
            	btnInitActionPerformed(evt);
            	if(er==0){
            	btnMatchISOActionPerformed(evt,usrCode);}
            	
            }
        });

       
     
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
               
                               
                               .addGap(60, 60, 60)
                            
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
            
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        		.addGap(20, 20, 20)
                            
                          
           
                            
               
                         .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            
              
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        		.addComponent(lable1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        		.addComponent(usertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            
                                
                                .addComponent(btnMatchISO, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                               .addGap(20, 20, 20)
                               .addGap(20, 20, 20)
                               .addGap(20, 20, 20)
                               .addGap(20, 20, 20)
                               .addGap(20, 20, 20)
                           
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                
                               .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            		))))))
                            		.addGap(20, 20, 20)
                            		.addGap(20, 20, 20)
                                    .addGap(20, 20, 20)
                                     .addGap(20, 20, 20)
                                 
                            		)
                            		.addGap(20, 20, 20)
                            		.addGap(20, 20, 20)
                            		.addGap(20, 20, 20)
                            		.addGap(20, 20, 20)
                            		.addGap(20, 20, 20)
                                    .addGap(20, 20, 20)
                                     .addGap(20, 20, 20)
                                 )
                                
                    ;
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
            		.addGap(20, 20, 20)
                    
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   
                            .addGroup(layout.createSequentialGroup()
                            		.addComponent(lable1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            		.addComponent(usertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            		.addComponent(btnMatchISO, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                              
                           
                               
                                
                                
                              
                                
                             
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                               .addGap(20, 20, 20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            		
                              
                           ))
                            		
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        )
                    
                    .addGroup(layout.createSequentialGroup()
                       
                    		.addGap(20, 20, 20)
                    		
                        
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        
                        .addGap(6, 6, 6)
                        
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
     
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                       
                        .addGap(5, 5, 5)
    
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                       
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGap(20, 20, 20)
                        
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
               
                .addContainerGap())
                .addGap(70, 70, 70)
       
        
        		 ); 
   

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitActionPerformed
    	lbl.setText("user code: " + usertxt.getText() );
    	
        int ret = mfs100.Init();
        if (ret == 0) {
            deviceInfo = mfs100.GetDeviceInfo();
       
            System.out.println("Width: " + String.valueOf(deviceInfo.Width()));
            System.out.println("Height: " + String.valueOf(deviceInfo.Height()));
            er=0;
            
        } else {
            JOptionPane.showMessageDialog(rootPane, "Error: " + mfs100.GetLastError() + " (" + String.valueOf(ret) + ")",appTitle,JOptionPane.ERROR_MESSAGE);
            er=1;
        }
    }//GEN-LAST:event_btnInitActionPerformed

    private void btnStartCaptureActionPerformed(java.awt.event.ActionEvent evt,String userCode) {//GEN-FIRST:event_btnStartCaptureActionPerformed
       
        if (setQuality() == false) {
            return;
        }

        if (setTimeOut() == false) {
            return;     }
        int ret = mfs100.StartCapture(quality, timeout, true);
        
        if (ret != 0) {
            JOptionPane.showMessageDialog(rootPane, "Error: " + mfs100.GetLastError() + " (" + String.valueOf(ret) + ")",appTitle,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnStartCaptureActionPerformed
   

   
    private void btnMatchISOActionPerformed(java.awt.event.ActionEvent evt, String usercode) {
    	//GEN-FIRST:event_btnMatchISOActionPerformed
    	String FilePath = System.getProperty("user.dir");
        FilePath += "\\FingerData\\"+usrCode+".iso";
        
 //.       java.nio.file.Path path = Paths.get(FilePath);
        byte[] data;
        FingerData fingerData = new FingerData();
        
        
		//try {
//			data = Files.readAllBytes(path);
//			ISOTemplate= data;
//			System.out.print(ISOTemplate);
//			System.out.print(("file found"));
//			
//		} catch (IOException e) {
//			
//			e.printStackTrace();
//		}
        
        	int score = 0;
            int mx = 0;
            int j=0;
		
		RestClient rt = new RestClient();
        
       
	    String fpnt="";
	    int you=0;
	    
		try {
			String  user=usertxt.getText();
			fpnt = rt.getfingerdata(user);
			System.out.println("fpnt: "+fpnt);
			if(fpnt.equals("{}")){
				final JOptionPane optionPane = new JOptionPane("please Ragister first", JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION, null, new Object[]{}, null);
            	final JDialog dialog = new JDialog();
            	dialog.setTitle("Message");
            	dialog.setModal(true);

            	dialog.setContentPane(optionPane);

            	dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            	dialog.pack();
            	Timer timer = new Timer(5000, new AbstractAction() {
            	    @Override
            	    public void actionPerformed(ActionEvent ae) {
            	        dialog.dispose();
            	    }
            	});
            	timer.setRepeats(false);//the timer should only go off once

            	//start timer to close JDialog as dialog modal we must start the timer before its visible
            	timer.start();
            	dialog.setVisible(true);
            	dialog.dispose();
            	
			}
			else{
				usertxt.setVisible(false);
				
				lable1.setVisible(false);
				try {
					TimeUnit.SECONDS.sleep(2);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		        usercode=usertxt.getText();
		        int ret = mfs100.AutoCapture(fingerData, 100000,  true,true);
			you=ret;
			
			JSONObject json = new JSONObject(fpnt);
			String datr = json.get("data").toString();
			System.out.println("datr: "+datr);
			//String[] fpnt1 = (String[])json.get("data");
			String ftkl = datr.toString();
			String[] fpnt1 = ftkl.split(",");
			System.out.println("fpntl 00 "+fpnt1[0]);
			//System.out.println("fpntl 11 "+fpnt1[1]);
			for(int i=0;i<fpnt1.length;i++){
				System.out.println("fpntl"+fpnt1[i]);
	        	String temp=fpnt1[i];
	        	byte[] decodedData = Base64.decodeBase64(temp);
	            System.out.println(decodedData);
	            System.out.println("data decoded");
	            System.out.println(decodedData);
	            ISOTemplate = decodedData;
	            
	            
	            score = mfs100.MatchISO(fingerData.ISOTemplate(), ISOTemplate);
	            
	            if(mx<score)
	            	mx=score;
	        }
			
		} }catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	//Arraylist<String[]> list = new Arraylist();
		
		
		         
    	if (ISOTemplate == null || ISOTemplate.length == 0) {
            
            return;
        }
        
    	
            if (mx >= 14000) {
           //     
                final JOptionPane optionPane = new JOptionPane("Finger Matched", JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION, null, new Object[]{}, null);
            	final JDialog dialog = new JDialog();
            	RestClient rp = new RestClient();
            	String v="V";
                try {
					rp.authenticateUser(v,usertxt.getText().toString());
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            	dialog.setTitle("Message");
            	dialog.setModal(true);

            	dialog.setContentPane(optionPane);

            	dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            	dialog.pack();
            	Timer timer = new Timer(3000, new AbstractAction() {
            	    @Override
            	    public void actionPerformed(ActionEvent ae) {
            	        dialog.dispose();
            	    }
            	});
            	timer.setRepeats(false);//the timer should only go off once

            	//start timer to close JDialog as dialog modal we must start the timer before its visible
            	timer.start();
            	dialog.setVisible(true);
            	dialog.dispose();
            	
                try {
        			TimeUnit.SECONDS.sleep(2);
        		} catch (InterruptedException e1) {
        			// TODO Auto-generated catch block
        			e1.printStackTrace();
        		}
                
               System.exit(0);
            } else if (mx >= 0 && mx < 14000) {
                JOptionPane.showMessageDialog(rootPane, "Finger Not Matched",appTitle,JOptionPane.INFORMATION_MESSAGE);
            } else {
               JOptionPane.showMessageDialog(rootPane, "Error: " + mfs100.GetLastError() + " (" + String.valueOf(you) + ")",appTitle,JOptionPane.ERROR_MESSAGE);
            }
        } //GEN-LAST:event_btnMatchISOActionPerformed
//GEN-LAST:event_btnMatchANSIActionPerformed

  
    @Override
    public void OnPreview(final FingerData fingerData) {
        //System.out.println("OnPreview");

        Runnable runnable = new Runnable() {
            public void run() {

               
            }
        };
        Thread trd = new Thread(runnable);
        trd.start();

    }
    String[] fingerprnt = null;
    
    @Override
    public void OnCaptureCompleted(boolean status, int errorCode, String errorMsg, final FingerData fingerData) {
        if (status) {
            Runnable runnable = new Runnable() {
                public void run() {

                   
                }
            };
  
            byte[] temp = fingerData.ISOTemplate(); 
            //sql ="INSERT INTO ";
           byte[] encodedData = Base64.encodeBase64(temp);
           encodeString = new String(encodedData) ; 
           JSONObject jsono = null;
		
           
           try {
        	   
        	   jsono = new JSONObject();
        	jsono.put("fingerNumber", q-1);
   			jsono.put("userCode", usertxt.getText());
   	        jsono.put("fingerData", encodeString);
   	        System.out.println("encoded string"+encodeString);
   	     System.out.println(jsono.toString());
		    RestClient rs = new RestClient();
	          // String Url = "http://35.163.181.189:8290/CobaSys";
	          rs.postbiomatric("/AccInfoService/SaveUserBiometric","json",jsono.toString());
	          System.out.println(jsono.toString());
	          
	          
	          
		} catch (JSONException e) {			
			e.printStackTrace();
		}
         
            
            
           
            //db.doCommit();
            
           // SaveUserBiomatric
            
           
            
            
            
            
            //publicstaticvoid main(String[] args) {  
                // Getting encoder  
               // Base64.Encoder encoder = Base64.getEncoder();  
                
                
            
            Thread trd = new Thread(runnable);
            trd.start();
            
            
            //byte[] encoded = Base64.getEncoder().encode(fingerData.ISOTemplate());
            //String encoded = Base64.getEncoder().encodeToString("Hello".getBytes());
            //System.out.println(ISOTemplate);
           // System.out.println(fingerData.ISOTemplate());
             
            ISOTemplate = new byte[fingerData.ISOTemplate().length];
            System.arraycopy(fingerData.ISOTemplate(), 0, ISOTemplate, 0, fingerData.ISOTemplate().length);
            System.out.println(ISOTemplate);
            
        } else {
            JOptionPane.showMessageDialog(rootPane, errorMsg + " (" + String.valueOf(errorCode) + ")",appTitle,JOptionPane.ERROR_MESSAGE);
        }
    }
    
   

	

    private boolean setQuality() {
        
            quality = 55;
        
        return true;
    }

    private boolean setTimeOut() {
       
        timeout = 10000;
        
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
    	
    	
    	
    	
    	try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(compare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    	
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new compare().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables

    private javax.swing.JButton btnMatchISO;
      private javax.swing.JTextField usertxt;
    private javax.swing.JLabel lable1;
    private javax.swing.JLabel lbl;
   
 
    

    // End of variables declaration//GEN-END:variables

    public class MyIcon implements Icon {

        int _Width = 0;
        int _Height = 0;

        public MyIcon(int Width, int Height) {
            this._Width = Width;
            this._Height = Height;
            m_Image = null;
        }

        public void paintIcon(Component c, Graphics g, int x, int y) {
            if (m_Image != null) {
                g.drawImage(m_Image, x, y, getIconWidth(), getIconHeight(), null);
            } else {
                g.fillRect(x, y, getIconWidth(), getIconHeight());
            }
        }

        public int getIconWidth() {
            return _Width;
        }

        public int getIconHeight() {
            return _Height;
        }

        public boolean LoadImage(String path) {
            boolean bRetCode = false;
            Image newImg;
            try {
                File f = new File(path);
                newImg = ImageIO.read(f);
                bRetCode = true;
                setImage(newImg);
            } catch (IOException e) {
            }

            return bRetCode;
        }

        public void setImage(Image Img) {
            if (Img != null) {
                m_Image = Img.getScaledInstance(getIconWidth(), getIconHeight(), Image.SCALE_FAST);
            } else {
                m_Image = null;
            }
        }

        private Image m_Image;
    }
}
